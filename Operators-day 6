Day 6: Mastering JavaScript Operators ⚙️
Welcome to Day 6 of our JavaScript journey! Today, we’ll explore operators—one of the core building blocks of programming. Operators allow us to perform various operations on data, like mathematical calculations, comparisons, logical decisions, and much more.

Let’s dive into the types of operators in JavaScript and see how to use them effectively.

What Are Operators?
Operators are special symbols or keywords used to manipulate data and variables. They perform operations like addition, comparison, or logical evaluations.

In JavaScript, operators are categorized into several types based on their functionality.

Types of JavaScript Operators
1. Arithmetic Operators
Used for performing mathematical calculations.

Operator	Description	    Example	Result
+	        Addition	      5 + 3	  8
-	        Subtraction	    5 - 3		2
*	        Multiplication	5 * 3		15
/	        Division	      6 / 3		2
%	        Modulus       	5 % 2	 	1
**	      Exponentiation	2 ** 3	8

Example:
let a = 10;
let b = 3;
console.log(a + b);  // Output: 13
console.log(a % b);  // Output: 1

2. Assignment Operators
Used to assign values to variables.

Operator	Example	Same As
=	        x = 10	Assign 10 to x
+=	      x += 5	x = x + 5
-=       	x -= 3	x = x - 3
*=       	x *= 2	x = x * 2
/=       	x /= 4	x = x / 4
%=       	x %= 2	x = x % 2
Example:
let x = 10;
x += 5;  // Same as x = x + 5
console.log(x);  // Output: 15

3. Comparison Operators
Used to compare two values and return a boolean (true or false).

Operator	Description    	      Example	  Result
==	      Equal to	            5 == "5"	true
===	      Strict equal to	      5 === "5"	false
!=	      Not equal to	        5 != "5"	false
!==      	Strict notequal to	  5 !== "5"	true
>	        Greater than	        10 > 5	  true
<	        Less than	            10 < 5	  false
>=	      Greaterthan||equal to	5 >= 5	  true
<=	      Less than or equal to	5 <= 4	  false

Example:
console.log(10 > 5);      // Output: true
console.log(10 === "10"); // Output: false

4. Logical Operators
Used to perform logical operations, often with boolean values.

Operator	Description	 Example	      Result
&&	      Logical AND	 true && false	false
`		                   `	            Logical OR
!	        Logical NOT	 !true	        false

Example:
let isAdult = true;
let hasID = false;
console.log(isAdult && hasID);  // Output: false
console.log(isAdult || hasID); // Output: true

5. Bitwise Operators
Operate on binary representations of numbers.

Operator	Description 	Example  	  Result
&	        Bitwise AND	  5 & 1	      1
`	        `      	      Bitwise OR  `5
^	        Bitwise XOR	  5 ^ 1	      4
~	        Bitwise NOT	  ~5	        -6
<<	      Left shift	  5 << 1	    10
>>       	Right shift	  5 >> 1	    2

6. Ternary Operator
A shorthand for if-else statements.

Syntax:
condition ? expr1 : expr2;
Example:
let age = 20;
let status = age >= 18 ? "Adult" : "Minor";
console.log(status);  // Output: Adult

7. Type Operators
Used to check or manipulate data types.

Operator	Description	Example	Result
typeof	Returns the data type	typeof "hello"	"string"
instanceof	Checks if an object is an instance of a class	arr instanceof Array	true

Example:
console.log(typeof 42);          // Output: number
console.log([] instanceof Array); // Output: true

Operator Precedence
When multiple operators are used in an expression, JavaScript evaluates them based on their precedence. Operators with higher precedence are executed first.

Example:
let result = 5 + 2 * 3;
console.log(result);  // Output: 11
In the example above, * has a higher precedence than +, so it’s evaluated first.

Quick Practice
Try these challenges to solidify your understanding:

Write a program to calculate the area of a rectangle using length and width.
Use comparison and logical operators to check if a number is between 10 and 50.
Use the ternary operator to assign "Pass" or "Fail" based on a score.
Conclusion
JavaScript operators are essential tools for manipulating data and building logic in your code. By mastering operators, you’ll be able to write more efficient and expressive programs.

In Day 7, we’ll explore JavaScript Control Flow, where you’ll learn how to control the flow of your programs using if, else, and loops.

Stay tuned, and happy coding! 😊
