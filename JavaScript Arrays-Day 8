Day 8: Exploring JavaScript Arrays ðŸ§©
Welcome to Day 8 of our JavaScript journey! Today, weâ€™re diving into one of the most versatile and powerful data structures in JavaScript: Arrays. Whether you're storing a list of items, looping through data, or performing complex transformations, arrays are your go-to tool.

Letâ€™s unravel the magic of arrays! ðŸŒŸ

What is an Array?
An array in JavaScript is a collection of items (called elements) stored in a single variable. Arrays can hold multiple values of different data types, including numbers, strings, objects, and even other arrays.

Syntax:
let arrayName = [element1, element2, element3];
Example:
let fruits = ["Apple", "Banana", "Cherry"];
console.log(fruits);
// Output: ["Apple", "Banana", "Cherry"]

Why Use Arrays?
Store multiple values in one variable.
Easily access and manipulate elements.
Iterate through elements using loops.
Perform operations like sorting, filtering, and transforming data.

Array Basics
Creating an Array
Using square brackets ([]):
let numbers = [1, 2, 3, 4, 5];

Using the Array constructor:
let names = new Array("Alice", "Bob", "Charlie");

Accessing Elements
Use the index to access array elements. Array indexing starts at 0.
let colors = ["Red", "Green", "Blue"];
console.log(colors[0]); // Output: Red
console.log(colors[2]); // Output: Blue

Modifying Elements
You can update elements using their index.
let animals = ["Cat", "Dog", "Rabbit"];
animals[1] = "Parrot";
console.log(animals);
// Output: ["Cat", "Parrot", "Rabbit"]

Finding the Length of an Array
The length property gives the total number of elements in an array.
let cars = ["Toyota", "Honda", "Ford"];
console.log(cars.length); // Output: 3

Array Methods
JavaScript arrays come with a variety of built-in methods to simplify operations.

1. Adding and Removing Elements
push(): Adds an element to the end of the array.
pop(): Removes the last element.
unshift(): Adds an element to the beginning.
shift(): Removes the first element.
Example:
let numbers = [1, 2, 3];
numbers.push(4); // [1, 2, 3, 4]
numbers.pop();   // [1, 2, 3]
numbers.unshift(0); // [0, 1, 2, 3]
numbers.shift();    // [1, 2, 3]

2. Iterating Over Arrays
for Loop:
let fruits = ["Apple", "Banana", "Cherry"];
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}

forEach() Method:
fruits.forEach((fruit) => {
  console.log(fruit);
});

3. Transforming Arrays
map(): Creates a new array by applying a function to each element.
let numbers = [1, 2, 3];
let squared = numbers.map((num) => num * num);
console.log(squared); // [1, 4, 9]

filter(): Creates a new array with elements that pass a condition.
let numbers = [1, 2, 3, 4, 5];
let even = numbers.filter((num) => num % 2 === 0);
console.log(even); // [2, 4]

4. Searching in Arrays
indexOf(): Finds the index of the first occurrence of an element.
includes(): Checks if an element exists in the array.
let items = ["Pen", "Pencil", "Eraser"];
console.log(items.indexOf("Pencil")); // Output: 1
console.log(items.includes("Marker")); // Output: false

5. Combining and Slicing Arrays
concat(): Combines two or more arrays.
let a = [1, 2];
let b = [3, 4];
let combined = a.concat(b);
console.log(combined); // [1, 2, 3, 4]

slice(): Extracts a section of the array.
let numbers = [1, 2, 3, 4, 5];
let sliced = numbers.slice(1, 3);
console.log(sliced); // [2, 3]

6. Sorting Arrays
sort(): Sorts elements alphabetically or numerically.
let names = ["Charlie", "Alice", "Bob"];
names.sort();
console.log(names); // ["Alice", "Bob", "Charlie"]

Reverse Sort:
names.reverse();
console.log(names); // ["Charlie", "Bob", "Alice"]

7. Flattening Arrays
Use flat() to flatten nested arrays.
let nested = [1, [2, 3], [4, [5]]];
let flatArray = nested.flat(2);
console.log(flatArray); // [1, 2, 3, 4, 5]

Quick Practice
Create an array of your favorite movies and print each movie.
Find the sum of numbers in an array using a loop.
Use filter() to create a new array with numbers greater than 10.

Conclusion
Arrays are a powerhouse in JavaScript, enabling you to store, access, and manipulate data effortlessly. Whether you're building a simple list or performing advanced operations, arrays make your life easier.

In Day 9, weâ€™ll explore JavaScript Objects, another key building block of programming. Stay tuned!
