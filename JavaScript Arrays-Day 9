Day 9: Unveiling JavaScript Objects üõ†Ô∏è
Welcome to Day 9 of our JavaScript journey! Today, we‚Äôll dive into JavaScript Objects, an essential concept that forms the backbone of modern JavaScript programming.

From storing complex data to creating reusable structures, objects empower us to design robust and scalable applications. Let‚Äôs get started! üöÄ

What is a JavaScript Object?
An object in JavaScript is a collection of key-value pairs, where the keys (properties) are strings or symbols, and the values can be any data type.

Syntax:
let objectName = {
  key1: value1,
  key2: value2,
  key3: value3,
};
Example:
let person = {
  name: "John Doe",
  age: 30,
  isEmployed: true,
};

Why Use Objects?
Store related data in a single structure.
Represent real-world entities like a person, car, or product.
Allow easy manipulation and organization of data.

Accessing Object Properties
You can access properties of an object using dot notation or bracket notation.

Dot Notation:
console.log(person.name); // Output: John Doe

Bracket Notation:
console.log(person["age"]); // Output: 30
Use bracket notation when the property name contains special characters or is dynamic.

Adding and Updating Properties

Add new properties:
person.country = "USA";
console.log(person);
// { name: "John Doe", age: 30, isEmployed: true, country: "USA" }

Update existing properties:
person.age = 31;
console.log(person.age); // Output: 31

Removing Properties
Use the delete keyword to remove properties.
delete person.isEmployed;
console.log(person);
// { name: "John Doe", age: 31, country: "USA" }

Iterating Over Objects

Using for...in:
for (let key in person) {
  console.log(`${key}: ${person[key]}`);
}
// Output:
// name: John Doe
// age: 31
// country: USA

Using Object.keys and Object.values:
console.log(Object.keys(person)); // ["name", "age", "country"]
console.log(Object.values(person)); // ["John Doe", 31, "USA"]

Nested Objects
Objects can contain other objects, enabling you to model more complex data.
let employee = {
  id: 1,
  name: "Jane Smith",
  address: {
    city: "New York",
    zip: "10001",
  },
};

console.log(employee.address.city); // Output: New York

Object Methods
Objects can also have methods, which are functions defined inside an object.
let calculator = {
  add: function (a, b) {
    return a + b;
  },
  subtract(a, b) {
    return a - b; // Shorter syntax
  },
};

console.log(calculator.add(5, 3)); // Output: 8
console.log(calculator.subtract(10, 7)); // Output: 3

Using this in Objects
The this keyword refers to the object it belongs to.
let car = {
  brand: "Toyota",
  model: "Corolla",
  details: function () {
    return `This car is a ${this.brand} ${this.model}.`;
  },
};

console.log(car.details());
// Output: This car is a Toyota Corolla.

Object Destructuring
Extract properties from objects into variables using destructuring.
let { name, age } = person;
console.log(name); // Output: John Doe
console.log(age);  // Output: 31
Combining and Copying Objects

Using Object.assign:
let obj1 = { a: 1, b: 2 };
let obj2 = { b: 3, c: 4 };
let combined = Object.assign({}, obj1, obj2);
console.log(combined);
// { a: 1, b: 3, c: 4 }

Using the Spread Operator (...):
let combined = { ...obj1, ...obj2 };
console.log(combined);
// { a: 1, b: 3, c: 4 }

Object Comparison
Objects are compared by reference, not by value.
let obj1 = { key: "value" };
let obj2 = { key: "value" };

console.log(obj1 === obj2); // Output: false
To compare objects deeply, use libraries like Lodash or write a custom comparison function.

Quick Practice
Create an object representing a book with properties like title, author, and pages.
Add a method to calculate the reading time based on a given speed (pages per hour).
Practice destructuring an object and accessing nested properties.

Conclusion
Objects are at the core of JavaScript and essential for structuring data in your applications. Mastering objects will unlock the true potential of JavaScript, allowing you to build sophisticated and dynamic programs.

In Day 10, we‚Äôll explore JavaScript Functions and Closures, where we‚Äôll understand more about the power of functions. Stay tuned! üéâ

