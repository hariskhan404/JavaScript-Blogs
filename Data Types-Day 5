Day 5: Exploring JavaScript Data Types ðŸš€
Welcome to Day 5 of our JavaScript blog series! Today, weâ€™ll dive into one of the most foundational topics in JavaScript: Data Types. Understanding data types is crucial because they form the building blocks of every program you write.

Letâ€™s break it down step by step and explore what makes JavaScript such a dynamic and versatile language.

What are Data Types?
Data types define the kind of value a variable can hold in programming. For example, a value could be a number, text, object, or something else entirely.

JavaScript has two main categories of data types:

Primitive Data Types
Non-Primitive (Reference) Data Types

Primitive Data Types
Primitive data types are the most basic and immutable (unchangeable) data types in JavaScript. There are 7 primitive types:

1. Number
The number data type is used for numeric values, including integers and floating-point numbers.

let age = 25;         // Integer
let price = 99.99;    // Float

console.log(typeof age);   // Output: number
console.log(typeof price); // Output: number
Special Values:
Infinity
-Infinity
NaN (Not-a-Number)
Example:

console.log(10 / 0);  // Output: Infinity
console.log("abc" - 5); // Output: NaN

2. String
A string is a sequence of characters enclosed in single quotes ('), double quotes ("), or backticks (`).

let name = "Haris";
let greeting = 'Hello';
let template = `Welcome, ${name}!`;

console.log(typeof name); // Output: string

3. Boolean
Booleans represent one of two values: true or false.

let isLoggedIn = true;
let isAdmin = false;

console.log(typeof isLoggedIn); // Output: boolean

4. Undefined
A variable is undefined if it has been declared but not assigned a value.

let x;
console.log(x);          // Output: undefined
console.log(typeof x);   // Output: undefined

5. Null
The null type represents an intentional absence of any object value.

let result = null;
console.log(result);        // Output: null
console.log(typeof result); // Output: object (a well-known quirk in JavaScript)

6. Symbol (ES6)
The symbol data type is used to create unique identifiers.

let id1 = Symbol("id");
let id2 = Symbol("id");

console.log(id1 === id2);  // Output: false
console.log(typeof id1);   // Output: symbol

7. BigInt (ES11)
BigInt is used to represent numbers larger than the Number.MAX_SAFE_INTEGER (2^53 - 1).

let bigNumber = 123456789012345678901234567890n;

console.log(bigNumber);       // Output: 123456789012345678901234567890n
console.log(typeof bigNumber); // Output: bigint
Non-Primitive (Reference) Data Types
Non-primitive types include objects, which can hold multiple values in key-value pairs or other forms. Objects are mutable (can be changed).

1. Object
An object is a collection of key-value pairs.

let user = {
  name: "Haris",
  age: 25,
  isAdmin: true,
};

console.log(user.name);     // Output: Haris
console.log(typeof user);   // Output: object

2. Array
An array is a special kind of object used to store ordered collections of items.

let numbers = [1, 2, 3, 4, 5];

console.log(numbers[0]);    // Output: 1
console.log(typeof numbers); // Output: object
3. Function
Functions are also objects in JavaScript.

function greet() {
  console.log("Hello!");
}

console.log(typeof greet);  // Output: function

4. Date
The Date object represents date and time.

let today = new Date();

console.log(today);         // Output: Current date and time
console.log(typeof today);  // Output: object

Dynamic Typing in JavaScript
JavaScript is a dynamically typed language, which means a variableâ€™s data type can change during the programâ€™s execution.

let value = "Hello";
console.log(typeof value); // Output: string

value = 42;
console.log(typeof value); // Output: number

Type Conversion
You can convert one data type to another explicitly or let JavaScript handle it implicitly.

Explicit Conversion
let num = "42";
console.log(Number(num));   // Output: 42

Implicit Conversion

let result = "5" * 2;  
console.log(result);        // Output: 10 (string converted to number)

Summary of Data Types

Data Type	Example	Description
Number	42, 3.14, NaN	Represents numeric values.
String	'Hello', "World"	Sequence of characters.
Boolean	true, false	Logical values.
Undefined	undefined	Declared but uninitialized.
Null	null	Intentional absence of value.
Symbol	Symbol('id')	Unique identifiers.
BigInt	123n	Large integers.
Object	{ key: 'value' }	Collection of key-value pairs.
Array	[1, 2, 3]	Ordered collection of values.
Function	function() {}	Block of reusable code.

Conclusion
JavaScriptâ€™s flexibility with its data types is one of the reasons itâ€™s so widely used, but it can also lead to unexpected bugs if you're not careful. By mastering these data types, youâ€™re building a strong foundation for writing efficient and bug-free code.

Quick Challenge for You ðŸŽ¯
Declare a variable with undefined and later assign it a string value.
Create an object that contains your name, age, and favorite programming language.
Thatâ€™s it for Day 5! On Day 6, weâ€™ll dive into JavaScript Operators. Stay tuned, and let me know if you have questions or want me to cover specific topics.

Happy Coding! ðŸ˜Š

